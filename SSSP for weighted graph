import heapq

def dijkstras(graph,start):
    distances={node:float('inf') for node in graph}
    distances[start]=0
    queue=[(0,start)]
    
    while queue:
        current_distance,current_node=heapq.heappop(queue)
        if current_distance>distances[current_node]:
            continue
        for neighbor,weight in graph[current_node].items():
            distance=current_distance+weight
            if distance<distances[neighbor]:
                distances[neighbor]=distance
                    
                heapq.heappush(queue,(distance,neighbor))
    
    return distances            
                    
graph= {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'D': 3, 'E': 2},
    'C': {'A': 4, 'F': 5},
    'D': {'B': 3},
    'E': {'B': 2, 'F': 1},
    'F': {'C': 5, 'E': 1}
}          


shortest_distances = dijkstras(graph, 'A')
print(shortest_distances)
