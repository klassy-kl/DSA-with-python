import queue

class avlnode:
    def __init__(self, data):
        self.data = data
        self.leftchild = None
        self.rightchild = None
        self.height = 1

def getheight(rootnode):
    if not rootnode:
        return 0
    return rootnode.height

def right_rotate(disbalancenode):
    newnode = disbalancenode.leftchild
    disbalancenode.leftchild = newnode.rightchild
    newnode.rightchild = disbalancenode
    disbalancenode.height = 1 + max(getheight(disbalancenode.leftchild), getheight(disbalancenode.rightchild))
    newnode.height = 1 + max(getheight(newnode.leftchild), getheight(newnode.rightchild))
    return newnode

def left_rotate(disbalancenode):
    newnode = disbalancenode.rightchild
    disbalancenode.rightchild = newnode.leftchild
    newnode.leftchild = disbalancenode
    disbalancenode.height = 1 + max(getheight(disbalancenode.leftchild), getheight(disbalancenode.rightchild))
    newnode.height = 1 + max(getheight(newnode.leftchild), getheight(newnode.rightchild))
    return newnode

def getbalance(rootnode):
    if not rootnode:
        return 0
    return getheight(rootnode.leftchild) - getheight(rootnode.rightchild)
    



def levelordertraversal(rootnode):
    if not rootnode:
        return
    else:
        cq=queue.Queue()
        cq.put(rootnode)
        while not cq.empty():
            root=cq.get()
            print(root.data)
            if root.leftchild is not None:
                cq.put(root.leftchild)
            if root.rightchild is not None:
                cq.put(root.rightchild)    
                
   
    

def insertnode(rootnode, nodevalue):
    if not rootnode:
        return avlnode(nodevalue)
    elif nodevalue < rootnode.data:
        rootnode.leftchild = insertnode(rootnode.leftchild, nodevalue)
    else:
        rootnode.rightchild = insertnode(rootnode.rightchild, nodevalue)

    rootnode.height = 1 + max(getheight(rootnode.leftchild), getheight(rootnode.rightchild))
    balance = getbalance(rootnode)

    if balance > 1 and nodevalue < rootnode.leftchild.data:
        return right_rotate(rootnode)

    if balance > 1 and nodevalue > rootnode.leftchild.data:
        rootnode.leftchild = left_rotate(rootnode.leftchild)
        return right_rotate(rootnode)

    if balance < -1 and nodevalue > rootnode.rightchild.data:
        return left_rotate(rootnode)

    if balance < -1 and nodevalue < rootnode.rightchild.data:
        rootnode.rightchild = right_rotate(rootnode.rightchild)
        return left_rotate(rootnode)

    return rootnode

newavl = avlnode(5)
newavl = insertnode(newavl, 10)
newavl = insertnode(newavl, 15)
newavl = insertnode(newavl, 20)
levelordertraversal(newavl) 
