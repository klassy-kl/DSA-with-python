class Graph:
    def __init__(self,vertices):
        self.v=vertices
        self.graph=[]
        
    def add_edge(self,src,dest,weight):
        self.graph.append([src,dest,weight])
    
    def belman_ford(self,source):
        distance=[float('inf')]*self.v
        distance[source]=0
        
        for _ in range(self.v-1):
            for src,dest,weight in self.graph:
                if distance[src]!=float('inf') and distance[src]+weight<distance[dest]:
                    distance[dest]=distance[src]+weight
                        
        for src,dest,weight in self.graph:
            if distance[src]!=float('inf') and distance[src]+weight<distance[dest]:
                return ValueError('Graph contain negative cycles(s)')
                
        return distance        
  
graph = Graph(5)
graph.add_edge(0, 1, -1)
graph.add_edge(0, 2, 4)
graph.add_edge(1, 2, 3)
graph.add_edge(1, 3, 2)
graph.add_edge(1, 4, 2)
graph.add_edge(3, 2, 5)
graph.add_edge(3, 1, 1)
graph.add_edge(4, 3, -3)

source=0
distances=graph.belman_ford(source)
print('shortest distance from source ',source, 'to all vertices')
for i in range(len(distances)):
    print('vertex',i,':distance',distances[i])
